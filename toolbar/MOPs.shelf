<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="MOPs" label="MOPs">
    <memberTool name="MOPS_convert_point_instances"/>
    <memberTool name="MOPS_Disable_Preview"/>
    <memberTool name="MOPS_Update"/>
  </toolshelf>

  <tool name="MOPS_convert_point_instances" label="MOPs to Point Instances" icon="opdef:MOPS::Sop/Instancer::1.1?mops_instancing.svg">
    <helpText><![CDATA[= MOPs to Point Instances = 

"""Converts a MOPs network into Fast Point Instances, for use with other renderers such as Redshift. """

This shelf tool converts one or more SOP networks with MOPs in them into individual object containers for each instance, along with an Instancer object that references them.
The generated <network_name>_MOPS_INSTANCE_RENDER Instance object is the resulting renderable object. The generated object containers are placed inside the subnetwork "MOPS_INSTANCES."

If you modify your instance object paths or indexes, you will likely need to delete the automatically generated MOPS_INSTANCE_RENDER Instance container before using this tool again.]]></helpText>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA["""
1.) get all s@objpath paths
2.) create object container subnet 'INSTANCES'
3.) create object container for each path found 
4.) object merge original (absolute) path of each path found into containers
5.) create originalSOP_INSTANCER object container
6.) append extract attributes and output null to original MOP network
6.) object merge output of original MOP network into originalSOP_INSTANCER and delete prims
7.) set s@instance attribute to point to generated containers
"""
import toolutils

prompt = toolutils.selectionPrompt(hou.sopNodeTypeCategory())
scene_viewer = toolutils.sceneViewer()
sel = scene_viewer.selectObjects(prompt)
INSTANCE_DICT = dict()

# collect instance paths
for i in sel:
    INSTANCE_DICT[i.path()] = dict()
    INSTANCE_DICT[i.path()]['paths'] = dict()

    out = i.displayNode()
    path_attr = out.geometry().findPointAttrib('objpath')
    if not path_attr:
        hou.ui.displayMessage('SOP node {} does not have "objpath" point attribute!'.format(out.name()), severity=hou.severityType.Error)
        continue
    index_attr = out.geometry().findPointAttrib('mops_index')
    if not index_attr:
        hou.ui.displayMessage('SOP node {} does not have "mops_index" point attribute!'.format(out.name()), severity=hou.severityType.Error)
        continue
    # since i'm shit at iterating over geometry, if there's a material override,
    # let's just promote that to a point attrib so we can do it all at once.
    mat_overrides = False
    temp_promote = None
    if out.geometry().findPrimAttrib('shop_materialpath'):
        mat_overrides = True
        temp_promote = i.createNode('attribpromote')
        temp_promote.setFirstInput(out)
        temp_promote.parm('inclass').set('primitive')
        temp_promote.parm('inname').set('shop_materialpath')
        out = temp_promote
    
    # now get paths information.
    for pt in out.geometry().iterPoints():
        path = pt.attribValue('objpath')
        index = str(pt.attribValue('mops_index'))
        if path not in INSTANCE_DICT[i.path()]['paths'].keys():
            INSTANCE_DICT[i.path()]['paths'][path] = dict()
            INSTANCE_DICT[i.path()]['paths'][path]['index'] = index
            INSTANCE_DICT[i.path()]['paths'][path]['material'] = None
            if mat_overrides:
                mat = pt.attribValue('shop_materialpath')
                INSTANCE_DICT[i.path()]['paths'][path]['material'] = mat
                
    if temp_promote:
        temp_promote.destroy()
                
# print(INSTANCE_DICT)
            
# get or build instances container subnet
instances_container = hou.node('/obj/MOPS_INSTANCES')
if instances_container is None:
    instances_container = hou.node('/obj').createNode('subnet', 'MOPS_INSTANCES')
    instances_container.setDisplayFlag(False)

# generate instance object containers
for network in INSTANCE_DICT:
    for i, v in INSTANCE_DICT[network]['paths'].iteritems():
        name = i.replace('/', '_')
        instanced_node = instances_container.node(name)
        if instanced_node is None:
            instanced_node = instances_container.createNode('geo', name)
            if instanced_node.node('file1') is not None:
			    instanced_node.node('file1').destroy()
            merge = instanced_node.createNode('object_merge')
            merge.parm('xformtype').set('local')
            merge.parm('objpath1').set(i)
            merge.setRenderFlag(True)
            merge.setDisplayFlag(True)
            # set material if one exists
            if v['material'] is not None:
                instanced_node.parm('shop_materialpath').set(v['material'])
    
for i in sel:
    # append output null to MOPS network(s)
    null = i.node('MOPS_OUT')
    if null is None:
        null = i.createNode('null', 'MOPS_OUT')
        out = i.displayNode()
        null.setFirstInput(out)
               
    # generate point instancer
    name = '/obj/{}_MOPS_INSTANCE_RENDER'.format(i.name())
    instancer = hou.node(name)
    if instancer is None:
        instancer = hou.node('/obj').createNode('instance', name.split('/')[-1])
        instancer.parm('ptinstance').set('fast')
        instancer.node('add').destroy()
        hou.node('/obj').layoutChildren([instancer])
    
    # merge in mops output and convert to points
    merge = instancer.node('merge_in_MOPS')
    if merge is None:
        merge = instancer.createNode('object_merge', 'merge_in_MOPS')
        merge.parm('objpath1').set(null.path())
    extract = instancer.node('extract_attributes')
    if extract is None:
        extract = instancer.createNode('MOPS::Extract_Attributes::1.0', 'extract_attributes')
        extract.setFirstInput(merge)
    add = instancer.node('remove_prims')
    if add is None:
        add = instancer.createNode('add', 'remove_prims')
        add.parm('keep').set(True)
        add.setFirstInput(extract)
        
    # point wrangle will map original instancer objpath attrs to new instance containers
    setInstance = instancer.node('set_instance_path')
    if setInstance is None:
        setInstance = instancer.createNode('attribwrangle', 'set_instance_path')
        setInstance.setFirstInput(add)
        setInstance.setDisplayFlag(True)
        setInstance.setRenderFlag(True)
        
    # generate instancing string. 
    instance_snippet = ""
    for k, v in INSTANCE_DICT[i.path()]['paths'].iteritems():
        container = instances_container.node(k.replace('/', '_'))
        instance_snippet += 'if(i@mops_index == {}) s@instance = "{}";\n'.format(v['index'], container.path())
    setInstance.parm('snippet').set(instance_snippet)
        
    # cleanup
    instancer.layoutChildren()    
    i.setDisplayFlag(False)
    instances_container.layoutChildren()
    hou.node('/obj').layoutChildren()]]></script>
  </tool>

  <tool name="MOPS_Update" label="MOPs Updater" icon="opdef:MOPS::Sop/Instancer::1.1?mops_update.svg">
    <script scriptType="python"><![CDATA[import json
import urllib
import os
import platform
import zipfile
import distutils.dir_util
import hou
from PySide2 import QtWidgets

# github URL
MOPS_URL = 'https://api.github.com/repos/toadstorm/MOPS'
# branches (only filters the filenames of the .ZIP files attached as assets for each release!)
BRANCHES = ['stable', 'experimental']
# paths to download zip files to before extraction
if platform.system() == "Windows":
    HOU_TEMP_PATH = os.path.join(os.getenv("APPDATA"), "MOPS")
    HOU_TEMP_PATH_STR = "$APPDATA\\MOPS"
else:
    HOU_TEMP_PATH = os.path.join(os.getenv("HOUDINI_USER_PREF_DIR"), "MOPS")
    HOU_TEMP_PATH_STR = HOU_TEMP_PATH

# local record of branch/version
MOPS_SETTINGS = os.path.join(os.getenv("HOUDINI_USER_PREF_DIR"), "mops.json")
HOUDINI_ENV = os.path.join(os.getenv("HOUDINI_USER_PREF_DIR"), "houdini.env")

# TODO: urllib is deprecated in python3
# TODO: function to glue this shit together and create the json MOPS_SETTINGS file
# TODO: UI for choosing install path if MOPS env var doesn't exist
# TODO: UI to select releases, install progress window

def get_install_info():
    info = {'branch': "N/A", 'release': "N/A"}
    if not os.path.exists(MOPS_SETTINGS):
        return info
    with open(MOPS_SETTINGS, 'r') as f:
        jdata = json.load(f)
    if jdata.get('branch'):
        info['branch'] = jdata['branch']
    if jdata.get('release'):
        info['release'] = jdata['release']
    return info
    
def update_info(branch, release):
    settings = dict()
    if os.path.exists(MOPS_SETTINGS):
        with open(MOPS_SETTINGS, 'r') as f:
            settings = json.load(f)
    info = {'branch': branch, 'release': release}
    settings = settings.update(info)
    with open(MOPS_SETTINGS, 'w') as f:
        json.dump(settings, f)

def get_releases():
    """
    get a list of all MOPS releases on github.
    :return: a list of releases (version numbers).
    """
    response = urllib.urlopen(MOPS_URL + "/releases")
    data = response.read()
    # print(data)
    if data == "":
        raise ValueError("No response from release server: {}".format(MOPS_URL + "/releases"))
    j_data = json.loads(data.decode('utf-8'))
    releases = list()
    try:
        for release in j_data:
            releases.append(release["tag_name"])
    except TypeError:
        raise ValueError("Rate limit reached. Please try again later.")
    return releases

def filter_releases(releases, type=None):
    if type == 'stable':
        releases = [f for f in releases if not f.endswith('e')]
    elif type == 'experimental':
        releases = [f for f in releases if f.endswith('e')]
    return releases

def get_download_path(release):
    """
    get the .ZIP download URL given a version and branch.
    :param release: the release version
    :return: the download URL
    """
    response = urllib.urlopen(MOPS_URL + "/releases/tags/" + release)
    data = response.read()
    # print(data)
    if data == "":
        raise ValueError("No response from release server: {}".format(MOPS_URL + "/releases/tags"  + release))
    j_data = json.loads(data.decode('utf-8'))
    return j_data.get('zipball_url')

def download_url(source):
    """
    Download the url source to the local temp folder.
    :param source: the source URL
    :return: the local file path
    """
    filename = 'MOPS_' + os.path.basename(source) + '.zip'
    local_path = os.path.join(HOU_TEMP_PATH, filename)
    # print(local_path)
    if not os.path.exists(os.path.dirname(local_path)):
        os.makedirs(os.path.dirname(local_path))
    urllib.urlretrieve(source, local_path)
    return local_path
    
def extract_update(zip_file):
    """
    Unzip the downloaded file and copy it to the appropriate install directory.
    :param zipfile: the downloaded zip file location on disk.
    :return: None
    """
    # the destination is based on the users' local MOPS install directory.
    # hopefully they followed the install instructions...
    extract_path = os.path.join(os.path.dirname(zip_file), os.path.splitext(os.path.basename(zip_file))[0])
    if not os.path.exists(extract_path):
        os.makedirs(extract_path)
    install_path = hou.getenv('MOPS')
    if install_path is None:
        # prompt user for proper install path...
        install_path = QtWidgets.QFileDialog.getExistingDirectory(self, 'Choose install parent directory...', HOUDINI_USER_PREF_DIR)
        install_path = os.path.join(install_path, "MOPS")
    if install_path is None:
        return
    # unzip the folder, then copy the contents of the folder to install_path.
    zip = zipfile.ZipFile(zip_file, 'r', zipfile.ZIP_DEFLATED)
    zip.extractall(extract_path)
    # the extracted item contains another folder, we want the contents
    actual_path = os.path.join(extract_path, os.listdir(extract_path)[0])
    distutils.dir_util.copy_tree(actual_path, install_path)
    

# environment auto-update

def update_houdini_env(env_file, analytics=False):
    # try to patch houdini.env to use the latest goodies.
    if os.path.exists(env_file):
        env_text = None
        with open(env_file, 'r') as f:
            env_text = f.readlines()
        # check HOUDINI_OTLSCAN_PATH, HOUDINI_TOOLBAR_PATH.
        # if $MOPS/otls or $MOPS/toolbar is in those entries, excise it.
        # add $MOPS to the HOUDINI_PATH. be sure to use the right separator!
        # only do this if "auto-update environment" is enabled!!
        has_mops_var = False
        has_houdini_path = False
        has_analytics_var = False
        separator = ':'
        if platform.system() == 'Windows':
            separator = ';'

        if env_text:
            for index, line in enumerate(env_text):
                if line.lower().startswith('mops ') or line.lower().startswith('mops='):
                    #print('found $MOPS variable')
                    has_mops_var = True
                    continue
                if line.lower().startswith('mops_allow_analytics'):
                    has_analytics_var = True
                    continue
                if line.lower().startswith('houdini_otlscan_path') or line.lower().startswith('houdini_toolbar_path'):
                    if has_mops_var:
                        line_start = line.split('=')[0].strip()
                        #print('found old environment var: {}'.format(line_start))
                        paths = line.split('=')[-1].strip().split(separator)
                        if paths:
                            out_paths = list()
                            for path in paths:
                                if not path.strip().lower().startswith('$mops'):
                                    # keep this
                                    out_paths.append(path)
                            # now replace line with the rejoined paths
                            if out_paths:
                                env_text[index] = line_start + ' = ' + separator.join(out_paths) + '\n'
                            else:
                                env_text.pop(index)

                elif line.lower().startswith('houdini_path'):
                    has_houdini_path = True
                    if has_mops_var:
                        paths = line.split('=')[-1].strip().split(separator)
                        if paths:
                            if "$mops" not in [f.lower() for f in paths]:
                                # insert mops variable into houdini_path
                                paths.insert(0, "$MOPS")
                            line = "HOUDINI_PATH = " + separator.join(paths) + '\n'
                            env_text[index] = line

            if not has_houdini_path:
                # add houdini_path env var
                env_text.append("HOUDINI_PATH = $MOPS" + separator + "&\n")
            if analytics and not has_analytics_var:
                env_text.append("MOPS_ALLOW_ANALYTICS = 1\n")

        if not has_mops_var:
            hou.ui.displayMessage('$MOPS not found in houdini.env! Aborting.')
            return False
        # backup existing env
        backup_path = os.path.join(os.path.dirname(env_file), 'houdini.env.BAK')
        shutil.copyfile(env_file, backup_path)
        with open(env_file, 'w') as f:
            f.writelines(env_text)
        # hou.ui.displayMessage('Environment file updated!')
        return True
    return False
    
# ui shit

class MOPsUpdateWindow(QtWidgets.QDialog):
    def __init__(self, parent):
        super(MOPsUpdateWindow, self).__init__(parent)
        self.setWindowTitle("MOPs Auto Updater")
        self.branch = 'stable'
        self.version = None
        self.releases = get_releases()
        self.buildui()
        self.refresh()
        
    def buildui(self):
        main_layout = QtWidgets.QVBoxLayout()
        btn_layout = QtWidgets.QHBoxLayout()
        form = QtWidgets.QGridLayout()
        main_layout.addLayout(form)
        current_branch_label = QtWidgets.QLabel('Current Branch: ')
        current_branch = QtWidgets.QLineEdit()
        current_build_label = QtWidgets.QLabel('Current Build: ')
        current_build = QtWidgets.QLineEdit()
        branch_combo_label = QtWidgets.QLabel('Select Branch: ')
        self.branch_combo = QtWidgets.QComboBox()
        build_combo_label = QtWidgets.QLabel('Select Build: ')
        self.build_combo = QtWidgets.QComboBox()
        self.update_env = QtWidgets.QCheckBox('Auto-Update houdini.env')
        self.update_env.setChecked(True)
        self.do_analytics = QtWidgets.QCheckBox('Share anonymous MOPs data')
        self.do_analytics.setChecked(False)
        apply_btn = QtWidgets.QPushButton('Apply Update')
        cancel_btn = QtWidgets.QPushButton('Cancel')
        form.addWidget(current_branch_label, 0, 0)
        form.addWidget(current_branch, 0, 1)
        form.addWidget(current_build_label, 1, 0)
        form.addWidget(current_build, 1, 1)
        form.addWidget(branch_combo_label, 2, 0)
        form.addWidget(self.branch_combo, 2, 1)
        form.addWidget(build_combo_label, 3, 0)
        form.addWidget(self.build_combo, 3, 1)
        main_layout.addStretch()
        main_layout.addWidget(self.update_env)
        main_layout.addWidget(self.do_analytics)
        main_layout.addLayout(btn_layout)
        btn_layout.addWidget(apply_btn)
        btn_layout.addWidget(cancel_btn)
        self.setLayout(main_layout)
        # defaults
        current_branch.setEnabled(False)
        current_build.setEnabled(False)
        install_info = get_install_info()
        current_branch.setText(install_info['branch'])
        current_build.setText(install_info['release'])
        # signals / slots
        self.branch_combo.currentIndexChanged.connect(self.set_branch)
        self.build_combo.currentIndexChanged.connect(self.set_build)
        apply_btn.clicked.connect(self.apply)
        cancel_btn.clicked.connect(self.close)
        self.update_env.clicked.connect(self.toggle_env_update)
        # window size
        self.setFixedSize(300, 200)
        
    def toggle_env_update(self):
        do_env = self.update_env.isChecked()
        if do_env:
            self.do_analytics.setEnabled(True)
        else:
            self.do_analytics.setEnabled(False)
        
    def populate_releases(self):
        releases = filter_releases(self.releases, self.branch)
        self.build_combo.clear()
        for i in releases:
            self.build_combo.addItem(i)
        
    def refresh(self):
        self.branch_combo.clear()
        for i in BRANCHES:
            self.branch_combo.addItem(i)
        index = self.branch_combo.findText(self.branch)
        self.branch_combo.setCurrentIndex(index)
        self.populate_releases()
        self.show()
        self.raise_()
        
    def set_branch(self):
        branch_name = self.branch_combo.currentText()
        self.branch = branch_name
        self.populate_releases()
        
    def set_build(self):
        build = self.build_combo.currentText()
        self.build = build
        
    def apply(self):
        # get the download path for the selected release, run download_url,
        # apply_update, then update the local json data file.
        try:
            release = self.build
            url = get_download_path(release)
            dl = download_url(url)
            extract_update(dl)
            update_info(self.branch, self.build)
            if(self.update_env.isChecked()):
                do_analytics = self.do_analytics.isChecked()
                update_houdini_env(HOUDINI_ENV, do_analytics)
            # notify user
            msg = '{} release {} installed. Please restart Houdini to see changes.'.format(self.branch.upper(), release)
            QtWidgets.QMessageBox.information(self, 'Update complete!', msg)
        except:
            # display error
            err = traceback.format_exc()
            msg = 'Error installing update: \n\n{}'.format(err)
            QtWidgets.QMessageBox.critical(self, 'Error installing update!', msg)
        finally:
            self.close()
        
    
# launch ui
win = MOPsUpdateWindow(hou.ui.mainQtWindow())
]]></script>
  </tool>

  <tool name="MOPS_Disable_Preview" label="Disable Falloff Previews" icon="opdef:MOPS::Sop/Plain_Falloff::1.0?mops_falloff_04.svg">
    <script scriptType="python"><![CDATA[import toolutils

# get current location
pane = toolutils.activePane(kwargs)
node = pane.pwd()

# recursively get all child nodes
if node:
    children = node.allSubChildren()
    if children:
        for i in children:
            if i.parm('do_preview') is not None:
                try:
                    i.parm('do_preview').set(0)
                except:
                    pass

]]></script>
  </tool>
</shelfDocument>
